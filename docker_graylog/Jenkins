pipeline {
    agent any
    tools {
        maven 'maven' 
    }
    stages {
        stage('Project Cleaning') {
            steps {
                sh 'mvn --version'
                sh 'mvn clean -f docker_graylog/pom.xml'
            }
        } 
     stage('Quality Analysis') {
      parallel {
        stage('Integration Testing') {
          agent any
          steps {
            echo 'Run integration tests here...'
          }
        }  
      stage("SonarQube analysis") {
         steps {
           echo 'SonarQube analysis...' 
          // sh 'cd docker_graylog && mvn clean compile sonar:sonar -Dsonar.host.url=http://sonarqube:9000   -Dsonar.login=370c0a2376851662baf405072c1375322bdbe24f'
          }
       }
      }
       }
         stage('Project Building') {
            steps {
                sh 'mvn clean install -Dmaven.test.skip=true -f docker_graylog/pom.xml'
            }
        }
        
      stage('Create Docker') {
      steps {
        echo 'Build and Publish Image...' 
         //sh 'docker build -t ${IMAGE} docker_graylog'
        sh """
     docker ps -f status=running -f name=${IMAGE}-${env.BRANCH_NAME} | grep ${IMAGE}-${env.BRANCH_NAME} && docker stop ${IMAGE}-${env.BRANCH_NAME}
     docker ps -a -f status=exited -f name=${IMAGE}-${env.BRANCH_NAME} | grep ${IMAGE}-${env.BRANCH_NAME} && docker rm ${IMAGE}-${env.BRANCH_NAME}
     docker build -t ${IMAGE} docker_graylog
     docker tag ${IMAGE} ${IMAGE}:${env.BRANCH_NAME}
                                                                                                        """
      }
    }
    stage('Deploy Image') {
      steps {
           echo 'Deploy Image...'   
                   sh """
    docker run -d --network=dockersetup_default --restart=always --name ${IMAGE}-${env.BRANCH_NAME} -e VIRTUAL_HOST=${IMAGE}-${env.BRANCH_NAME}.50hertz.in.co ${IMAGE}:${env.BRANCH_NAME}
                                                                                                        """
  
      }
    }
        
    }
    
    environment {
    IMAGE = 'db'
    BRANCH_NAME='master'
    //IMAGE = readMavenPom().getArtifactId()
    //VERSION = readMavenPom().getVersion()
    SERVER_MODE = 'dev'
  }
    
    options {
    timestamps()
  }
    
}
